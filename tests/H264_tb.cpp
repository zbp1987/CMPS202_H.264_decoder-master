//==============================================================================
//      File:           $URL$
//      Version:        Automatically generated by 'ATC' script
//      Author:         Rigo Dicochea 
//                      Tom Golubev
//                      Jose Renau
//      Copyright:      Copyright 2005 UC Santa Cruz
//==============================================================================

//==============================================================================
//      Section:        License
//==============================================================================
//      Copyright (c) 2005, Regents of the University of California
//      All rights reserved.
//
//      Redistribution and use in source and binary forms, with or without modification,
//      are permitted provided that the following conditions are met:
//
//              - Redistributions of source code must retain the above copyright notice,
//                      this list of conditions and the following disclaimer.
//              - Redistributions in binary form must reproduce the above copyright
//                      notice, this list of conditions and the following disclaimer
//                      in the documentation and/or other materials provided with the
//                      distribution.
//              - Neither the name of the University of California, Santa Cruz nor the
//                      names of its contributors may be used to endorse or promote
//                      products derived from this software without specific prior
//                      written permission.
//
//      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//      ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//      WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//      DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
//      ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//      ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//==============================================================================

/****************************************************************************
    Description:
  //Start DUT variable definition
  BoolType		reset;
  RingPacketType		switch_2_block;
  BoolType		switch_2_blockValid;
  BoolType		switch_2_blockRetry;
  RingPacketType		block_2_switch;
  BoolType		block_2_switchValid;
  BoolType		block_2_switchRetry;
  ReclkControlType		input rce1;
  ReclkControlType		input rce2;
  ReclkFailureType		rctf1;
  ReclkFailureType		rctf2;


	//This data structure defines the "usable" data processed by node

  typedef struct packed{
    RingAddrType    srcid;   //4 bits
    RingAddrType    destid;  //4 bits
    RingCmdType     cmd;     //1 bits
    RingOpcodeType  opcode;  //7 bits 
    RingloadType    data;    //64 bits
  }RingPacketType;  //80 bits


****************************************************************************/
		
#include <iostream>
#include <ctime>
#include <cstdlib>
#include <iomanip>
#include <time.h>
#include <string.h> 
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include "vpi_user.h"
#include "veriuser.h"

#include "atc_fns.h"

#include "H264_tb.h"
#include "H264_ttb.h"

#ifdef MODELSIM 
typedef PLI_INT32 PLIType;
#else
typedef uint32_t PLIType;
#endif

#define GLOBAL_PRINT  0
#define DEBUG_PRINT   0

using namespace std;


//Useful debugging macros, debugging and error message macros so we can pin down message provenance at a glance
#define DEBUGPRINT2(...)       vpi_printf(__VA_ARGS__)
#define ALWAYSPRINT(_fmt, ...)  DEBUGPRINT2(DBGSTR _fmt, WHEREARG, __VA_ARGS__)
#define ERRORPRINT(_fmt, ...)  DEBUGPRINT2(ERRSTR _fmt, WHEREARG, __VA_ARGS__)

struct instruction_t
{
	unsigned char		reset_n;
	unsigned char		pin_disable_DF;
	unsigned char		freq_ctrl0;
	unsigned char		freq_ctrl1;

};



void H264_tb_init() {

  int32_t time_seed = time(0);

 	vpi_printf("@D Running for %d cycles\n", NUM_EXECUTE_CYCLES);
	
	char *opt = mc_scan_plusargs("print=");
	// Handle RNG Seeding     
	opt = mc_scan_plusargs("seed=");
	if (opt) {
		time_seed = atoi(opt);
	}	
 	time_seed = 1240608344; //FIXME: remove, just for debugging
	//srand ( time_seed ); // seed RNG
	
	vpi_printf("\t\t\tTestbench Seeded with %d\n\n", time_seed);

	//vpi_printf("Reset is set high for: %d cycles\n", CYCLES_HOLD_RESET);

	//state                               = RESET;
	//nextstate							  = RESET;
}// /H264_tb_init()


// Check if operation produced the correct result
void H264_tb_check(H264_ * dut) {
	vpi_printf("@D *************H264_tb check()*************\n");

}// /H264_tb_check()


/* The main function, set all the data inputs
   This fn is independant of H264_tb_check(), to increase verification and isolation of check and set functions*/
void H264_tb_set(H264_ * dut) {
	//////////////////////////////////////////////////////
	vpi_printf("\n\n		    ********Cycle: %d********\n", num_total_ops);
	vpi_printf("@D *********************H264_tb set()*********************\n");
		
	dut->reset_n = 0;
	dut->pin_disable_DF = 0;
	dut->freq_ctrl0 = 0;
	dut->freq_ctrl1 = 1;

}// /H264_tb_set()


// Print all errors, summary, free memory
void H264_tb_end() {
	vpi_printf("\n\n");

	if(any_failure != 0)
    {
        vpi_printf("Dummy you failed, go fix it!!!!");
    }
    else
    {
		vpi_printf("TOTAL CYCLES: %d\nSTATS: TOTAL VALID INST: %d STOP ASSERTED %d PERCENT OF THE TIME\n\n", num_total_ops, total_num_valid_inst, PERCENT_STOP);
        vpi_printf("YOU MIGHT BE THE SMARTEST PERSON IN THE WORLD, Great Job :), Galations 2:20!!!!\n\n");
    }    
	
	vpi_printf("\n%d Clock Cycles Total H264_tb FINISHED\n", num_total_ops); 

}// /H264_tb_end()


//   Automatically Generated by handles.rb
