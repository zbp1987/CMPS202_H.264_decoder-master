//==============================================================================
//      File:           $URL$
//      Version:        Automatically generated by 'System Verilog to VPI' script
//      Author:         Script By Tom Golubev
//      Copyright:      Copyright 2005-2009 UC Santa Cruz
//==============================================================================

//==============================================================================
//     Section:        License
//==============================================================================
//      Copyright (c) 2005-2009, Regents of the University of California
//      All rights reserved.
//
//      Redistribution and use in source and binary forms, with or without modification,
//      are permitted provided that the following conditions are met:
//
//              - Redistributions of source code must retain the above copyright notice,
//                      this list of conditions and the following disclaimer.
//              - Redistributions in binary form must reproduce the above copyright
//                      notice, this list of conditions and the following disclaimer
//                      in the documentation and/or other materials provided with the
//                      distribution.
//             - Neither the name of the University of California, Santa Cruz nor the
//                      names of its contributors may be used to endorse or promote
//                     products derived from this software without specific prior
//                      written permission.
//
//      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//      ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//      WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//      DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
//      ANY DIRECT, INDIRECT, INCIDENTAL,SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//      ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//      SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//==============================================================================


/****************************************************************************
    Description: TestBench Verilog File for alu_ref_design.v
 
****************************************************************************/


import retry_common::*;
import rnet_common::*;


module  H264_tb();

  //Start DUT variable definition
	BoolType reset_n;
	BoolType pin_disable_DF;
	BoolType freq_ctrl0;
	BoolType freq_ctrl1;

  logic mclk;

  real                                  val;
  real                                  val_clk_delay;
  real                                  val_set_delay;
  real                                  val_check_delay;
  real                                  val_clk_width;
  logic                            clk;
	logic                            CLK_PAD;
	assign CLK_PAD = clk;

  nova_tb H264_dut(.*);
  

  initial begin
    if (!$value$plusargs("clk=%g",val)) begin
      val                               = 100;
    end
    if (!$value$plusargs("clk_delay=%g",val_clk_delay)) begin
      val_clk_delay                     = 0.0/10;
    end
    if (!$value$plusargs("set_delay=%g",val_set_delay)) begin
      val_set_delay                     = 5.2/10;
    end
    if (!$value$plusargs("check_delay=%g",val_check_delay)) begin
      val_check_delay                     = 9.6/10;
    end
    if (!$value$plusargs("clk_width=%g",val_clk_width)) begin
      val_clk_width                      = 5.0/10;
    end

    $display("full clock %5.3f GHz +clk=%g +clk_delay=%.2f +clk_width=%.2f +set_delay=%.2f +check_delay=%.2f", 1.0/val, val, val_clk_delay, val_clk_width, val_set_delay, val_check_delay);
  end



  initial begin
		// Not all the blocks use reset (assume reset set for simpler testcases
		//reset = 1'b1;
    mclk                                = 1'b1;
    clk                                 = 1'b1;
    
    $H264_init (reset_n,
		 pin_disable_DF,
		 freq_ctrl0,
		 freq_ctrl1);// /init fn

  end

  always begin
    #(val/2) mclk                   = ~mclk;
  end

`ifdef USE_SDF
  always @(posedge clk) begin // Sync with master clock
    // Pulse width
    #(val_clk_width*val) clk                   = 1'b0;
  end

  always @(posedge mclk) begin
    // pulse delay
    #(val_clk_delay*val) clk                   = 1'b1;
  end
`else
  always @(posedge clk) begin // Sync with master clock
    // Pulse width
    #(val/2) clk                   = 1'b0;
  end

  always @(posedge mclk) begin
    #(val) clk                   = 1'b1;
  end
`endif

`ifdef USE_SDF
  always @(posedge clk) begin
    #(val_set_delay*val)
    $H264_set();
  end
  always @(posedge clk) begin
    #(val_check_delay*val)
    $H264_check();
  end
`else
  always @(posedge clk) begin
    #(51*val/100) $H264_set();
    #(40*val/100) $H264_check();
  end
`endif
 
endmodule
 
